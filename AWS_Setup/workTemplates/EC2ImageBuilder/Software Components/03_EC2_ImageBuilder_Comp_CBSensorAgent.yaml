AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: "EC2 ImageBuilder Component for CarbonBlack Sensor Agent"
  
Parameters: 
  s3downloadbucket:
    Description: "Name of the S3 Bucket to download data from"
    Type: String
    Default: "ec2imagebuilder-eiger-infra"

Resources:
    ImageBuilderComponent:
        Type: "AWS::ImageBuilder::Component"
        Properties:
            Name: "cb-psc-sensor-agent"
            Description: "Carbon Black Enterprise EDR Sensor Agent Install"
            Version: "2.11.3"
            Platform: "Linux"
            Tags:
              Purpose: "GoldenImage"
              Platform: "Linux"
            Data: |
              name: cb-psc-sensor
              description: Install cb-psc-sensor.
              schemaVersion: 1.0

              parameters:
                - amzn_cbagent:
                    type: string
                    default: 'cb-psc-sensor-amazon-linux-2.11.3.629089'
                    description: CB Agent Package Name and Version for AmazonLinux Family.
                
                - rhel_cbagent:
                    type: string
                    default: 'cb-psc-sensor-rhel-2.11.3.629089'
                    description: CB Agent Package Name and Version for RedHat Family.
                    
                - package_type:
                    type: string
                    default: 'tar'
                    description: CB Agent Package Type.
                
                - s3_download_bucket:
                    type: string
                    default: 'ec2imagebuilder-eiger-infra'
                    description: S3 Download Bucket.

              phases:

                - name: build
                  steps:
                    - name: Fail
                      action: ExecuteBash
                      inputs:
                        commands:
                          - echo 1
                          
                    - name: OperatingSystemRelease
                      action: ExecuteBash
                      inputs:
                        commands:
                          - |
                            FILE=/etc/os-release
                            if [ -e $FILE ]; then
                              . $FILE
                              MAJOR_VERSION=$(echo $VERSION_ID | grep -o ^[0-9])
                              echo "$ID${MAJOR_VERSION:+${MAJOR_VERSION}}"
                            else
                              echo "The file $FILE does not exist. Failing build."
                              exit {{ build.Fail.outputs.stdout }}
                            fi
                  
                    - name: OperatingSystemArchitecture
                      action: ExecuteBash
                      inputs:
                        commands:
                          - |
                            ARCH=$(uname -m)
                            if [ `echo $ARCH | grep -Ev '^(aarch64|x86_64)'` ]; then
                              echo "The '$ARCH' architecture is not supported. Failing build."
                              exit {{ build.Fail.outputs.stdout }}
                            fi
                            echo $ARCH
                            
                    - name: Check_Install_Kernel_KernelHeaders
                      action: ExecuteBash
                      inputs:
                        commands:
                          - |
                            kerneldevelver=$(yum list kernel-devel | grep kernel-devel | head -1 | awk '{print $2}')
                            
                            if [[ ! $(rpm -qa | grep kernel-${kerneldevelver}) ]];then
                              echo -e "\nInstalling kernel and kernel-devel with version ${kerneldevelver}:\n"
                              yum install -y kernel-${kerneldevelver} kernel-devel-${kerneldevelver}
                              touch /tmp/reboot_required
                            elif [[ ! $(rpm -qa | grep kernel-devel-${kerneldevelver}) ]];then
                              echo -e "\nInstalling kernel-devel with version ${kerneldevelver}:\n"
                              yum install -y kernel-devel-${kerneldevelver}
                            else
                              echo -e "\nBoth kernel and kernel-devel are already at latest version ${kerneldevelver}\n"
                            fi
                      
                    - name: Reboot_If_Needed
                      action: ExecuteBash
                      inputs:
                        commands:
                          - |
                            if [[ -f "/tmp/reboot_required" ]];then
                              echo -e "\nReboot Required, Initiating Reboot.\n"
                              exit 194
                            else
                              echo -e "\nReboot Not Required.\n"
                            fi
                            
                    - name: Install_cb-psc-sensor
                      action: ExecuteBash
                      inputs:
                        commands:
                          - |
                            set -x
                            os_release={{ build.OperatingSystemRelease.outputs.stdout }}
                            package_type={{package_type}}
                            cd $(pwd)/
                            if [[ $os_release = amzn[2-9] ]];then
                              cbagent={{amzn_cbagent}}
                            else
                              cbagent={{rhel_cbagent}}
                            fi
                            aws s3 cp s3://{{s3_download_bucket}}/Software/$os_release/${cbagent}.${package_type} .
                            if [[ -f "${cbagent}.${package_type}" ]];then
                              id -a
                              tar -xvf ${cbagent}.${package_type} || pwd
                              chmod 755 install.sh
                              sudo ./install.sh '6NUFH22ZWP5@31SUPKA'
                              sudo systemctl stop cbagentd
                              sudo systemctl enable cbagentd
                            else
                              exit {{ build.Fail.outputs.stdout }}
                            fi

                - name: validate
                  steps:
                    - name: Validate_cb-psc-sensor_Install
                      action: ExecuteBash
                      inputs:
                        commands:
                          - yum info kernel-devel-$(uname -r)
                          - yum info cb-psc-sensor
                          - systemctl status cbagentd --no-pager && echo -e "\ncbagentd Service Running, As Not Expected.\n" || echo -e "\ncbagentd Service Not Running, As Expected.\n"