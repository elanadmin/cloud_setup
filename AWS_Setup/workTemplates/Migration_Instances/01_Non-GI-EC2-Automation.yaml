AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a multi-account and multi-Region SSM Document using AWS Systems Manager Automation.
Parameters:
  EventBridgeRuleSchedule:
    Type: String
    Description: >-
      The cron or rate expression to use for the EventBridge rule. For example: cron(0 02 ? * TUE *). Important: The time zone used is UTC. For more information, see https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html.
    Default: cron(15 03 * * ? *)
  MasterAccountID:
    Type: String
    Description: >-
      Management/Master AWS AccountID.
    Default: '188206870753'
  ExecutionRoleName:
    Type: String
    Default: AWS-SystemsManager-AutomationExecutionRole
    Description: >-
      The Automation execution role to be assumed in target accounts during multi-account and multi-Region Automation patching operations.
  ExistingAutomationAdministrationRole:
    Type: String
    Description: >-
      (Optional) The IAM role ARN of an existing Automation Administration role which has permissions to invoke multi-account and multi-Region Automation workflows.
  MaximumConcurrency:
    Type: String
    Default: 50%
    Description: >-
      Specify the number or percentage of targets on which to execute the task at the same time. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 10%.
  MaximumErrors:
    Type: String
    Default: 50%
    Description: >-
      The number of errors that are allowed before the system stops initiating the automation on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. The default value is 10%.
  ResourceGroupNames:
    Type: String
    Description: >-
      Enter a resource group that includes the resources you want to target. Important: The Resource Group name is case sensitive.
    Default: "Eiger-Linux-NonGI-EC2"
  TargetLocationMaxConcurrency:
    Type: String
    Default: '5'
    Description: >-
      Specify the number or percentage of locations (account-Region pairs) on which to execute the task at the same time. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 1.
  TargetLocationMaxErrors:
    Type: String
    Default: '1'
    Description: >-
      Specify an error threshold which will stop the task after the task fails on a specific number or percentage of locations. You can specify either an absolute number of errors, for example 10, or a percentage of the locations, for example 10%. The default value is 1.
  TargetRegionIds:
    Type: String
    Description: >-
      Comma separated list of AWS Regions to target. For example: us-east-1, ap-south-1.
    Default: "us-east-1"
  AutomationAssumeRole:
    Type: String
    Description: >-
      Automation AssumeRole
    Default: "arn:aws:iam::188206870753:role/AWS-SystemsManager-PostMigrationAutomationRole"
  TargetAccounts:
    Type: String
    Description: >-
      Comma separated list of AWS Account Ids for the target account(s).
    Default: 169523143400,054172767459,651154789300,744295199755,810234045291,601697125460
  TargetRegionIds:
    Type: String
    Description: >-
      Comma separated list of AWS Regions to target. For example: us-east-1,ap-south-1.
    Default: us-east-1

Conditions:
  CreateAutomationAdministrationRoleCondition:
    Fn::Equals:
    - Ref: ExistingAutomationAdministrationRole
    - ''
Resources:
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge rule created for scheduled multi-account and multi-Region Automation of Security Agents Install using AWS Lambda and AWS Systems Manager Automation
      Name: Schedule-Trigger-for-Lambda-PostMigration-Automation
      ScheduleExpression:
        Ref: EventBridgeRuleSchedule
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - MultiAccountSCAutomationBlogLambdaFunction
          - Arn
        Id: MultiAccountSCAutomationBlog
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: MultiAccountSCAutomationBlogLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EventBridgeRule
        - Arn

  AWSLambdaSSMMultiAccountSCAutomationBlogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-Lambda-SSM-MultiAccountSCAutomationBlogRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AWSLambdaSSMMultiAccountSCAutomationBlogPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${AutomationDocumentPostMigrationAutomation}:$DEFAULT
          - Action: iam:PassRole
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-AutomationAdministrationRole
            Effect: Allow
          - Action: logs:CreateLogGroup
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
            Effect: Allow
          - Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/MultiAccountSCAutomationBlog:*
            Effect: Allow

  MultiAccountSCAutomationBlogLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: !Sub | 
          import boto3
          import os
          import string
          import uuid

          client = boto3.client('ssm')

          def handler(event,context):
              TargetAccounts=os.environ['TargetAccounts']
              b = str(TargetAccounts)
              TargetAccountsArray = b.split(",")
              TargetRegionIds=os.environ['TargetRegionIds']
              b = str(TargetRegionIds)
              TargetRegionIdsArray = b.split(",")
              ResourceGroupNames=os.environ['ResourceGroupNames']
              b = str(ResourceGroupNames)
              ResourceGroupNamesArray = b.split(",")
              MaximumConcurrency=os.environ['MaximumConcurrency']
              MaximumErrors=os.environ['MaximumErrors']
              TargetLocationMaxConcurrency=os.environ['TargetLocationMaxConcurrency']
              TargetLocationMaxErrors=os.environ['TargetLocationMaxErrors']
              ExecutionRoleName=os.environ['ExecutionRoleName']
              MasterAccountID=os.environ['MasterAccountID']
              AutomationDocumentMamrSCAutomation=os.environ['AutomationDocumentMamrSCAutomation']
              
              for ResourceGroupName in ResourceGroupNamesArray:
                  response = client.start_automation_execution(
                  DocumentName=f'{AutomationDocumentMamrSCAutomation}',
                      
                  Parameters={
                      'AutomationAssumeRole':[f'arn:aws:iam::{MasterAccountID}:role/AWS-SystemsManager-AutomationAdministrationRole'],
                      'ResourceGroupName': [f'{ResourceGroupName}']
                  },
                  TargetLocations=[
                      {
                          'Accounts': TargetAccountsArray,
                          'Regions': TargetRegionIdsArray,
                          'TargetLocationMaxConcurrency': f'{TargetLocationMaxConcurrency}',
                          'TargetLocationMaxErrors': f'{TargetLocationMaxErrors}',
                          'ExecutionRoleName': f'{ExecutionRoleName}'
                      }
                  ]
              )
              print(response)
      Environment: 
        Variables:
            TargetAccounts: !Ref TargetAccounts
            TargetRegionIds: !Ref TargetRegionIds
            ResourceGroupNames: !Ref ResourceGroupNames
            MaximumConcurrency: !Ref MaximumConcurrency
            MaximumErrors: !Ref MaximumErrors
            TargetLocationMaxConcurrency: !Ref TargetLocationMaxConcurrency
            TargetLocationMaxErrors: !Ref TargetLocationMaxErrors
            ExecutionRoleName: !Ref ExecutionRoleName
            MasterAccountID: !Sub ${AWS::AccountId}
            AutomationDocumentMamrSCAutomation: !Ref AutomationDocumentPostMigrationAutomation
      FunctionName: MultiAccountSCAutomationBlog
      Handler: index.handler
      Role: !GetAtt AWSLambdaSSMMultiAccountSCAutomationBlogRole.Arn 
      Runtime: python3.7

  AutomationAdministrationServiceRole:
    Type: AWS::IAM::Role
    Condition: CreateAutomationAdministrationRoleCondition
    Properties:
      RoleName: AWS-SystemsManager-PostMigrationAutomationRole
      PermissionsBoundary: "arn:aws:iam::188206870753:policy/SEPermissionBoundary"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AssumeRole-AWSSystemsManagerAutomationExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sts:AssumeRole
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::*:role/AWS-SystemsManager-AutomationExecutionRole
          - Effect: Allow
            Action: iam:PassRole
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-PostMigrationAutomationRole
          - Effect: Allow
            Action:
            - organizations:ListAccountsForParent
            Resource:
            - "*"

  AutomationDocumentPostMigrationAutomation:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Automation
      DocumentFormat: YAML
      Name: Eiger-PostMigrationAutomation
      TargetType: /AWS::ResourceGroups::Group
      Content:
        description: >-
          **Description**

          "Run Security Agents/Tools Install on Non-GoldenImage AMI Built EC2 Linux Instances using Command/Automation Document."
        schemaVersion: '0.3'
        outputs:
          - Run_Security_Patching.OutputPayload
          - OS_Release.OutputPayload
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole:
            description: The ARN of the Automation service role to assume.
            type: String
            default: !Ref AutomationAssumeRole
          ResourceGroupName:
            description: '(Required) The name of the ResourceGroup to target Instances.'
            type: String
            default: !Ref ResourceGroupNames
          RunCISChecks:
            description: '(Required) Run CIS Checks on target Instances.'
            type: String
            default: "false"
            allowedValues:
            - "true"
            - "false" 
          SnapshotId:
            default: ''
            description: '(Optional) The snapshot ID to use to retrieve a patch baseline snapshot.'
            type: String
          RunPatchBaselineRebootOption:
            default: NoReboot
            description: '(Optional) Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant  until a subsequent reboot and scan.'
            type: String
            allowedValues:
            - RebootIfNeeded
            - NoReboot
          RunPatchBaselineInstallOverrideList:
            default: ''
            description: '(Optional) An https URL or an Amazon S3 path-style URL to the list of patches to be installed. This patch installation list overrides the patches specified by the default patch baseline.'
            type: String
            allowedPattern: '(^$)|^https://.+$|^s3://([^/]+)/(.*?([^/]+))$'
          RunPatchBaselineOperation:
            default: Scan
            description: '(Required) The update or configuration to perform on the instance. The system checks if patches specified in the patch baseline are installed on the instance. The install operation installs patches missing from the baseline.'
            type: String
            allowedValues:
            - Scan
            - Install
          QualysActivationId:
            type: String
            default: '96f4172e-2d4e-462d-92a7-4e96a80f2c34'
            description: qualys-cloud-agent ActivationId.    
          QualysCustomerId:
            type: String
            default: 'e76a2f4e-d6af-e59c-82c6-a64e3ad45856'
            description: qualys-cloud-agent CustomerId.
          s3downloadbucket:
            type: String
            default: 'ec2imagebuilder-eiger-infra'
            description: S3 Download Bucket.
          CleanUpWorkDir:
            type: String
            default: "true"
            description: CleanUp WorkDir.
            allowedValues:
            - "true"
            - "false"
          RunOnlySanityChecks:
            type: String
            default: "false"
            description: Run Only Sanity Checks, Skipping Further Steps.
            allowedValues:
            - "true"
            - "false"
          RunOnlyQualysAgentInstall:
            type: String
            default: "false"
            description: Run Only Qualys Agent Install, Skipping Further Steps.
            allowedValues:
            - "true"
            - "false"
          RunSecurityPatching:
            type: String
            default: "false"
            description: Run SecurityPatching, Along with Security Agents Install.
            allowedValues:
            - "true"
            - "false"
        mainSteps:
          - name: GetInstance
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: DescribeInstanceInformation
            outputs:
            - Name: myInstance
              Selector: "$.InstanceInformationList[0].InstanceId"
              Type: String
            - Name: platform
              Selector: "$.InstanceInformationList[0].PlatformType"
              Type: String
            
          - name: Check_OS_Platform
            action: aws:branch
            inputs:
              Choices:
              - NextStep: Source_Env_Settings
                Variable: "{{GetInstance.platform}}"
                Contains: "Linux"
              Default:
                CleanUp_WorkDir
          
          - name: Source_Env_Settings
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/env_settings.sh"}'
                "commandLine": "bash env_settings.sh"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true

          - name: Sanity_Checks
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/sanity_checks.sh"}'
                "commandLine": "bash sanity_checks.sh"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue
          
          - name: Question_Run_Only_Sanity_Checks
            action: aws:branch
            inputs:
              Choices:
              - NextStep: CleanUp_WorkDir
                Variable: "{{RunOnlySanityChecks}}"
                Contains: "true"
              Default: Install_PreReqs

          - name: Install_PreReqs
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_prereqs.sh"}'
                "commandLine": "bash install_prereqs.sh"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Question_Run_Security_Patching
            action: aws:branch
            inputs:
              Choices:
              - NextStep: Pre_Patching_Commands
                Variable: "{{RunSecurityPatching}}"
                Contains: "true"
              Default: OS_Release
                
          - name: Pre_Patching_Commands
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/pre_patching_cmds.sh"}'
                "commandLine": "bash pre_patching_cmds.sh"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true

          - name: Run_Security_Patching 
            action: 'aws:runCommand'
            description: "This command runs the AWS Command/Automation document 'AWS-RunPatchBaseline' on the specified ResourceGroup."
            inputs:
              MaxErrors: !Ref MaximumErrors
              Parameters:
                SnapshotId: '{{ SnapshotId }}'
                RebootOption: '{{ RunPatchBaselineRebootOption }}'
                InstallOverrideList: '{{ RunPatchBaselineInstallOverrideList }}'
                Operation: '{{ RunPatchBaselineOperation }}'
              MaxConcurrency: !Ref MaximumConcurrency
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
              DocumentName: AWS-RunPatchBaseline
            timeoutSeconds: 7200
            onFailure: Abort

          - name: Misc_Postrun_Scripts
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/misc_postrun_scripts.sh"}'
                "commandLine": "bash misc_postrun_scripts.sh {{s3downloadbucket}} {{ RunPatchBaselineRebootOption }}"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: OS_Release
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                  - |
                    #!/bin/bash
                    FILE=/etc/os-release
                    if [ -e $FILE ]; then
                      . $FILE
                      MAJOR_VERSION=$(echo $VERSION_ID | grep -Eo ^[0-9]+)
                      echo "$ID${MAJOR_VERSION:+${MAJOR_VERSION}}" | tee /var/tmp/os_release
                    else
                      echo "The file $FILE does not exist. Failing build."
                      exit 1
                    fi
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true

          - name: Find_Arch
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                  - |
                    #!/bin/bash
                    ARCH=$(uname -m)
                    if [ `echo $ARCH | grep -Ev '^(aarch64|x86_64)'` ]; then
                      echo "The '$ARCH' architecture is not supported. Failing build."
                      exit 1
                    fi
                    echo $ARCH | tee /var/tmp/arch
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
              
          - name: Install_CloudWatch_Agent
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_cwagent.sh"}'
                "commandLine": "bash install_cwagent.sh"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Install_Qualys_Agent
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_qualys_agent.sh"}'
                "commandLine": "bash install_qualys_agent.sh {{s3downloadbucket}} {{QualysActivationId}} {{QualysCustomerId}}"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Evaluate_Next_Steps_Qualys
            action: aws:branch
            inputs:
              Choices:
              - NextStep: CleanUp_WorkDir
                Variable: "{{RunOnlyQualysAgentInstall}}"
                Contains: "true"
              Default: Install_CBSensor_Agent

          - name: Install_CBSensor_Agent
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_cbsensor_agent.sh"}'
                "commandLine": "bash install_cbsensor_agent.sh {{s3downloadbucket}}"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Install_Defender_Agent
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_defender_agent.sh"}'
                "commandLine": "bash install_defender_agent.sh {{s3downloadbucket}}"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Question_Run_CIS_Checks
            action: aws:branch
            inputs:
              Choices:
              - NextStep: Install_CIS_Compliance_Checks
                Variable: "{{RunCISChecks}}"
                Contains: "true"
              Default: CleanUp_WorkDir

          - name: Install_CIS_Compliance_Checks
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_cis_compliance_checks.sh"}'
                "commandLine": "bash install_cis_compliance_checks.sh {{s3downloadbucket}} {{RunCISChecks}}"
                "workingDirectory": "/var/tmp/PostMigrationAutomation"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            onFailure: Continue
          
          - name: CleanUp_WorkDir
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/cleanup_workdir.sh"}'
                "commandLine": "bash cleanup_workdir.sh {{CleanUpWorkDir}} {{GetInstance.platform}}"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-PostMigrationAutomation
                CloudWatchOutputEnabled: true
            isEnd: true