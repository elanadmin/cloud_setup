AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a scheduled multi-account and multi-Region patching operation using Amazon EventBridge, AWS Lambda, and AWS Systems Manager Automation.
Parameters:
  EventBridgeRuleSchedule:
    Type: String
    Description: >-
      The cron or rate expression to use for the EventBridge rule. For example: cron(0 02 ? * TUE *). Important: The time zone used is UTC. For more information, see https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html.
    Default: cron(0 02 ? * TUE *)
  ExecutionRoleName:
    Type: String
    Default: AWS-SystemsManager-AutomationExecutionRole
    Description: >-
      The Automation execution role to be assumed in target accounts during multi-account and multi-Region Automation patching operations.
  ExistingAutomationAdministrationRole:
    Type: String
    Description: >-
      (Optional) The IAM role ARN of an existing Automation Administration role which has permissions to invoke multi-account and multi-Region Automation workflows.
  MaximumConcurrency:
    Type: String
    Default: 50%
    Description: >-
      Specify the number or percentage of targets on which to execute the task at the same time. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 10%.
  MaximumErrors:
    Type: String
    Default: 50%
    Description: >-
      The number of errors that are allowed before the system stops initiating the automation on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. The default value is 10%.
  RunPatchBaselineOperation:
    Type: String
    Default: Install
    AllowedValues:
      - Scan
      - Install
    Description: >-
      (Required) The update or configuration to perform on the instance. The Scan operation checks if patches specified in the patch baseline are installed on the instance. The Install operation installs patches missing from the baseline.
  RunPatchBaselineRebootOption:
    Type: String
    Default: RebootIfNeeded
    AllowedValues:
      - RebootIfNeeded
      - NoReboot
    Description: >-
      (Optional) Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant until a subsequent reboot and scan.
  RunPatchBaselineInstallOverrideList:
    Type: String
    Default: ''
    AllowedPattern: '(^$)|^https://.+$|^s3://([^/]+)/(.*?([^/]+))$'
    Description: >-
      (Optional) An https URL or an Amazon S3 path-style URL to the list of patches to be installed. This patch installation list overrides the patches specified by the default patch baseline.
  ResourceGroupNames:
    Type: String
    Description: >-
      Enter a Comma seperated list resource groups that includes the resources you want to target. Important: The Resource Group names are case sensitive.
    Default: Eiger-Linux-EC2-Patching
    AllowedValues:
    - "Eiger-Linux-EC2-Patching"
    - "Eiger-Linux-EC2-Patching-NoReboot"
    - "Eiger-Linux-EC2-Patching-Primary"
    - "Eiger-Linux-EC2-Patching-Secondary"
    - "Eiger-Linux-EC2-Patching-Critical"
    - "Eiger-Linux-EC2-Patching-NonCritical"
  TargetAccounts:
    Type: String
    Description: >-
      Comma separated list of AWS Account Ids for the target account(s).
    Default: 169523143400,054172767459
  TargetLocationMaxConcurrency:
    Type: String
    Default: '5'
    Description: >-
      Specify the number or percentage of locations (account-Region pairs) on which to execute the task at the same time. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 1.
  TargetLocationMaxErrors:
    Type: String
    Default: '5'
    Description: >-
      Specify an error threshold which will stop the task after the task fails on a specific number or percentage of locations. You can specify either an absolute number of errors, for example 10, or a percentage of the locations, for example 10%. The default value is 1.
  TargetRegionIds:
    Type: String
    Description: >-
      Comma separated list of AWS Regions to target. For example: us-east-1,ap-south-1.
    Default: us-east-1
  MasterAccountID:
    Type: String
    Description: >-
      Management/Master AWS AccountID.
    Default: '188206870753'
  AutomationAssumeRole:
    Type: String
    Description: >-
      Automation AssumeRole
    Default: "arn:aws:iam::188206870753:role/AWS-SystemsManager-AutomationAdministrationRole"

Conditions:
  CreateAutomationAdministrationRoleCondition:
    Fn::Equals:
    - Ref: ExistingAutomationAdministrationRole
    - ''

Resources:
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge rule created for scheduled multi-account and multi-Region Automation patching using AWS Lambda and AWS Systems Manager Automation
      Name: Schedule-Trigger-for-Lambda-MultiAccountPatchingBlog
      ScheduleExpression:
        Ref: EventBridgeRuleSchedule
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - MultiAccountPatchingBlogLambdaFunction
          - Arn
        Id: MultiAccountPatchingBlog
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: MultiAccountPatchingBlogLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EventBridgeRule
        - Arn

  AWSLambdaSSMMultiAccountPatchingBlogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-Lambda-SSM-MultiAccountPatchingBlogRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AWSLambdaSSMMultiAccountPatchingBlogPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${AutomationDocumentMamrRunPatchBaseline}:$DEFAULT
          - Action: iam:PassRole
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-AutomationAdministrationRole
            Effect: Allow
          - Action: logs:CreateLogGroup
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
            Effect: Allow
          - Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/MultiAccountPatchingBlog:*
            Effect: Allow

  MultiAccountPatchingBlogLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: !Sub | 
          import boto3
          import os
          import string
          import uuid

          client = boto3.client('ssm')

          def handler(event,context):
              TargetAccounts=os.environ['TargetAccounts']
              b = str(TargetAccounts)
              TargetAccountsArray = b.split(",")
              TargetRegionIds=os.environ['TargetRegionIds']
              b = str(TargetRegionIds)
              TargetRegionIdsArray = b.split(",")
              RunPatchBaselineOperation=os.environ['RunPatchBaselineOperation']
              RunPatchBaselineRebootOption=os.environ['RunPatchBaselineRebootOption']
              RunPatchBaselineInstallOverrideList=os.environ['RunPatchBaselineInstallOverrideList']
              ResourceGroupNames=os.environ['ResourceGroupNames']
              b = str(ResourceGroupNames)
              ResourceGroupNamesArray = b.split(",")
              MaximumConcurrency=os.environ['MaximumConcurrency']
              MaximumErrors=os.environ['MaximumErrors']
              TargetLocationMaxConcurrency=os.environ['TargetLocationMaxConcurrency']
              TargetLocationMaxErrors=os.environ['TargetLocationMaxErrors']
              ExecutionRoleName=os.environ['ExecutionRoleName']
              MasterAccountID=os.environ['MasterAccountID']
              AutomationDocumentMamrRunPatchBaseline=os.environ['AutomationDocumentMamrRunPatchBaseline']
              
              if len(RunPatchBaselineInstallOverrideList) > 0:
                  for ResourceGroupName in ResourceGroupNamesArray:
                      response = client.start_automation_execution(
                      DocumentName=f'{AutomationDocumentMamrRunPatchBaseline}',
                  
                      Parameters={
                          'AutomationAssumeRole':[f'arn:aws:iam::{MasterAccountID}:role/AWS-SystemsManager-AutomationAdministrationRole'] ,
                          'Operation' : [f'{RunPatchBaselineOperation}'] ,
                          'RebootOption' : [f'{RunPatchBaselineRebootOption}'] ,
                          'InstallOverrideList' : [f'{RunPatchBaselineInstallOverrideList}'] ,
                          'SnapshotId' : [str(uuid.uuid4())] ,
                          'ResourceGroupName': [f'{ResourceGroupName}']
                      },
                      TargetLocations=[
                          {
                              'Accounts': TargetAccountsArray,
                              'Regions': TargetRegionIdsArray,
                              'TargetLocationMaxConcurrency': f'{TargetLocationMaxConcurrency}',
                              'TargetLocationMaxErrors': f'{TargetLocationMaxErrors}',
                              'ExecutionRoleName': f'{ExecutionRoleName}'
                          }
                      ]
              )
              else:
                  for ResourceGroupName in ResourceGroupNamesArray:
                      response = client.start_automation_execution(
                      DocumentName=f'{AutomationDocumentMamrRunPatchBaseline}',
                      
                      Parameters={
                          'AutomationAssumeRole':[f'arn:aws:iam::{MasterAccountID}:role/AWS-SystemsManager-AutomationAdministrationRole'] ,
                          'Operation' : [f'{RunPatchBaselineOperation}'] ,
                          'RebootOption' : [f'{RunPatchBaselineRebootOption}'] ,
                          'SnapshotId' : [str(uuid.uuid4())] ,
                          'ResourceGroupName': [f'{ResourceGroupName}']
                      },
                      TargetLocations=[
                          {
                              'Accounts': TargetAccountsArray,
                              'Regions': TargetRegionIdsArray,
                              'TargetLocationMaxConcurrency': f'{TargetLocationMaxConcurrency}',
                              'TargetLocationMaxErrors': f'{TargetLocationMaxErrors}',
                              'ExecutionRoleName': f'{ExecutionRoleName}'
                          }
                      ]
              )
              print(response)
      Environment: 
        Variables:
            TargetAccounts: !Ref TargetAccounts
            TargetRegionIds: !Ref TargetRegionIds
            RunPatchBaselineOperation: !Ref RunPatchBaselineOperation
            RunPatchBaselineRebootOption: !Ref RunPatchBaselineRebootOption
            RunPatchBaselineInstallOverrideList: !Ref RunPatchBaselineInstallOverrideList
            ResourceGroupNames: !Ref ResourceGroupNames
            MaximumConcurrency: !Ref MaximumConcurrency
            MaximumErrors: !Ref MaximumErrors
            TargetLocationMaxConcurrency: !Ref TargetLocationMaxConcurrency
            TargetLocationMaxErrors: !Ref TargetLocationMaxErrors
            ExecutionRoleName: !Ref ExecutionRoleName
            MasterAccountID: !Sub ${AWS::AccountId}
            AutomationDocumentMamrRunPatchBaseline: !Ref AutomationDocumentMamrRunPatchBaseline
      FunctionName: MultiAccountPatchingBlog
      Handler: index.handler
      Role: !GetAtt AWSLambdaSSMMultiAccountPatchingBlogRole.Arn 
      Runtime: python3.7

  AutomationAdministrationServiceRole:
    Type: AWS::IAM::Role
    Condition: CreateAutomationAdministrationRoleCondition
    Properties:
      RoleName: AWS-SystemsManager-AutomationAdministrationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AssumeRole-AWSSystemsManagerAutomationExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sts:AssumeRole
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::*:role/AWS-SystemsManager-AutomationExecutionRole
          - Effect: Allow
            Action:
            - organizations:ListAccountsForParent
            Resource:
            - "*"
 
  AutomationDocumentMamrRunPatchBaseline:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Automation
      DocumentFormat: YAML
      Name: Eiger-BaselineSecurityPatching
      TargetType: /AWS::ResourceGroups::Group
      Content:
        description: >-
          **Description**

          "Run Security Patching using 'AWS-RunPatchBaseline' Command/Automation Document."
        schemaVersion: '0.3'
        outputs:
          - RunSecurityPatching.OutputPayload
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole:
            type: String
            default: !Ref AutomationAssumeRole
            description: Default Automation AssumeRole.
          s3downloadbucket:
            type: String
            default: 'ec2imagebuilder-eiger-infra'
            description: S3 Download Bucket.
          ResourceGroupName:
            description: '(Required) The name of the ResourceGroup to target Instances.'
            type: String
            default: !Ref ResourceGroupNames
            allowedValues:
            - "Eiger-Linux-EC2-Patching"
            - "Eiger-Linux-EC2-Patching-NoReboot"
            - "Eiger-Linux-EC2-Patching-Primary"
            - "Eiger-Linux-EC2-Patching-Secondary"
            - "Eiger-Linux-EC2-Patching-Critical"
            - "Eiger-Linux-EC2-Patching-NonCritical"
          SnapshotId:
            default: ''
            description: '(Optional) The snapshot ID to use to retrieve a patch baseline snapshot.'
            type: String
          RebootOption:
            default: !Ref RunPatchBaselineRebootOption
            description: '(Optional) Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant  until a subsequent reboot and scan.'
            type: String
            allowedValues:
            - "RebootIfNeeded"
            - "NoReboot"
          InstallOverrideList:
            default: ''
            description: '(Optional) An https URL or an Amazon S3 path-style URL to the list of patches to be installed. This patch installation list overrides the patches specified by the default patch baseline.'
            type: String
          Operation:
            default: !Ref RunPatchBaselineOperation
            description: '(Required) The update or configuration to perform on the instance. The system checks if patches specified in the patch baseline are installed on the instance. The install operation installs patches missing from the baseline.'
            type: String
            allowedValues:
            - "Scan"
            - "Install"
          RunOnlySanityChecks:
            type: String
            default: "false"
            description: Run Only Sanity Checks, Skipping Further Steps.
            allowedValues:
            - "true"
            - "false"
          RunOnlyPostRunScripts:
            type: String
            default: "false"
            description: Run Only PostRun Scripts.
            allowedValues:
            - "true"
            - "false"
          RunCustomPackageUpgrades:
            type: String
            default: "false"
            description: Run Custom Package Upgrades, located at ssm parameter store /Patching/Custom_Package_Upgrades.
            allowedValues:
            - "true"
            - "false"
          CleanUpWorkDir:
            type: String
            default: "true"
            description: CleanUp WorkDir.
            allowedValues:
            - "true"
            - "false"
          MasterAccountID:
            type: String
            default: !Ref AWS::AccountId
            description: Management/Master AWS AccountID.
          MaxErrors:
            type: String
            description: Max Run Errors.
            default: "50%"
          MaxConcurrency:
            type: String
            description: Max Run Concurrency.
            default: "50%"
        mainSteps:
          - name: GetInstance
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: DescribeInstanceInformation
            outputs:
            - Name: myInstance
              Selector: "$.InstanceInformationList[0].InstanceId"
              Type: String
            - Name: platform
              Selector: "$.InstanceInformationList[0].PlatformType"
              Type: String

          - name: Source_Env_Settings
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/env_settings.sh"}'
                "commandLine": "bash env_settings.sh"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true

          - name: Sanity_Checks
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/sanity_checks.sh"}'
                "commandLine": "bash sanity_checks.sh"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: PrePatch_Security_Report
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/security_checks.sh"}'
                "commandLine": "bash security_checks.sh"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Question_RunOnlySanityChecks
            action: aws:branch
            inputs:
              Choices:
              - NextStep: CleanUp_WorkDir
                Variable: "{{RunOnlySanityChecks}}"
                Contains: "true"
              Default: Install_Prereqs

          - name: Install_Prereqs
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/install_prereqs.sh"}'
                "commandLine": "bash install_prereqs.sh"
                "workingDirectory": "/var/tmp/BaselineSecurityPatching"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Question_RunOnlyPostRunScripts
            action: aws:branch
            inputs:
              Choices:
              - NextStep: Misc_Postrun_Scripts
                Variable: "{{RunOnlyPostRunScripts}}"
                Contains: "true"
              Default: Pre_Patching_Commands

          - name: Pre_Patching_Commands
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/pre_patching_cmds.sh"}'
                "commandLine": "bash pre_patching_cmds.sh"
                "workingDirectory": "/var/tmp/BaselineSecurityPatching"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Install_Diff_Patches
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/diffpatch.sh"}'
                "commandLine": "bash diffpatch.sh"
                "workingDirectory": "/var/tmp/BaselineSecurityPatching"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Question_RunCustomPackageUpgrades
            action: aws:branch
            inputs:
              Choices:
              - NextStep: Custom_Package_Upgrades
                Variable: "{{ RunCustomPackageUpgrades }}"
                Contains: "true"
              Default: RunSecurityPatching
          
          - name: Custom_Package_Upgrades
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/custom_package_upgrades.sh"}'
                "commandLine": "bash custom_package_upgrades.sh"
                "workingDirectory": "/var/tmp/BaselineSecurityPatching"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: RunSecurityPatching
            description: "This runs the AWS Command/Automation document 'AWS-RunPatchBaseline' on the specified ResourceGroup."
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunPatchBaseline
              MaxErrors: !Ref MaximumErrors
              Parameters:
                SnapshotId: '{{ SnapshotId }}'
                RebootOption: '{{ RebootOption }}'
                InstallOverrideList: '{{ InstallOverrideList }}'
                Operation: '{{ Operation }}'
              MaxConcurrency: !Ref MaximumConcurrency
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            timeoutSeconds: 7200
            onFailure: Abort

          - name: PostPatch_Security_Report
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/security_checks.sh"}'
                "commandLine": "bash security_checks.sh /var/tmp/security_patches.out"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Misc_Postrun_Scripts
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/misc_postrun_scripts.sh"}'
                "commandLine": "bash misc_postrun_scripts.sh {{ s3downloadbucket }} {{ RebootOption }}"
                "workingDirectory": "/var/tmp/BaselineSecurityPatching"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Reboot_If_Needed
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                  - |
                    if [[ -f "/tmp/reboot_required" ]];then
                      echo -e "\nReboot Required, Initiating Reboot.\n"
                      rm /tmp/reboot_required
                      exit 194
                    else
                      echo -e "\nAlready Rebooted or Reboot Not Required.\n"
                    fi
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: Post_Verify_Scripts
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/post_verify.sh"}'
                "commandLine": "bash post_verify.sh"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true
            onFailure: Continue

          - name: CleanUp_WorkDir
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunRemoteScript
              Parameters:
                "sourceType": "S3"
                "sourceInfo": '{"path":"https://{{s3downloadbucket}}.s3.amazonaws.com/Scripts/post_migration_scripts/cleanup_workdir.sh"}'
                "commandLine": "bash cleanup_workdir.sh {{CleanUpWorkDir}} {{GetInstance.platform}}"
                "workingDirectory": "/var/tmp"
              Targets:
                - Values:
                    - '{{ ResourceGroupName }}'
                  Key: 'resource-groups:Name'
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: /aws/ssm/Eiger-BaselineSecurityPatching
                CloudWatchOutputEnabled: true